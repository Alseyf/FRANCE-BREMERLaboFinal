//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListFilmsByIdActor", ReplyAction="http://tempuri.org/IService1/GetListFilmsByIdActorResponse")]
        DTO.FilmDTO[] GetListFilmsByIdActor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListFilmsByIdActor", ReplyAction="http://tempuri.org/IService1/GetListFilmsByIdActorResponse")]
        System.Threading.Tasks.Task<DTO.FilmDTO[]> GetListFilmsByIdActorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListCharacterByIdActorAndIdFilm", ReplyAction="http://tempuri.org/IService1/GetListCharacterByIdActorAndIdFilmResponse")]
        DTO.CharacterDTO[] GetListCharacterByIdActorAndIdFilm(int idAct, int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListCharacterByIdActorAndIdFilm", ReplyAction="http://tempuri.org/IService1/GetListCharacterByIdActorAndIdFilmResponse")]
        System.Threading.Tasks.Task<DTO.CharacterDTO[]> GetListCharacterByIdActorAndIdFilmAsync(int idAct, int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindListFilmByPartialActorName", ReplyAction="http://tempuri.org/IService1/FindListFilmByPartialActorNameResponse")]
        DTO.FilmDTO[] FindListFilmByPartialActorName(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindListFilmByPartialActorName", ReplyAction="http://tempuri.org/IService1/FindListFilmByPartialActorNameResponse")]
        System.Threading.Tasks.Task<DTO.FilmDTO[]> FindListFilmByPartialActorNameAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoriteFilms", ReplyAction="http://tempuri.org/IService1/GetFavoriteFilmsResponse")]
        DTO.LightFilmDTO[] GetFavoriteFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFavoriteFilms", ReplyAction="http://tempuri.org/IService1/GetFavoriteFilmsResponse")]
        System.Threading.Tasks.Task<DTO.LightFilmDTO[]> GetFavoriteFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFullActorDetailsByIdActor", ReplyAction="http://tempuri.org/IService1/GetFullActorDetailsByIdActorResponse")]
        DTO.FullActorDTO GetFullActorDetailsByIdActor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFullActorDetailsByIdActor", ReplyAction="http://tempuri.org/IService1/GetFullActorDetailsByIdActorResponse")]
        System.Threading.Tasks.Task<DTO.FullActorDTO> GetFullActorDetailsByIdActorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCommentOnActorId", ReplyAction="http://tempuri.org/IService1/InsertCommentOnActorIdResponse")]
        bool InsertCommentOnActorId(int id, DTO.CommentDTO commDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCommentOnActorId", ReplyAction="http://tempuri.org/IService1/InsertCommentOnActorIdResponse")]
        System.Threading.Tasks.Task<bool> InsertCommentOnActorIdAsync(int id, DTO.CommentDTO commDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFullActor", ReplyAction="http://tempuri.org/IService1/GetFullActorResponse")]
        DTO.FullActorDTO[] GetFullActor(int limite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFullActor", ReplyAction="http://tempuri.org/IService1/GetFullActorResponse")]
        System.Threading.Tasks.Task<DTO.FullActorDTO[]> GetFullActorAsync(int limite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComments", ReplyAction="http://tempuri.org/IService1/GetCommentsResponse")]
        DTO.CommentDTO[] GetComments(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComments", ReplyAction="http://tempuri.org/IService1/GetCommentsResponse")]
        System.Threading.Tasks.Task<DTO.CommentDTO[]> GetCommentsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindActorByPartialName", ReplyAction="http://tempuri.org/IService1/FindActorByPartialNameResponse")]
        DTO.FullActorDTO[] FindActorByPartialName(string s, int limite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindActorByPartialName", ReplyAction="http://tempuri.org/IService1/FindActorByPartialNameResponse")]
        System.Threading.Tasks.Task<DTO.FullActorDTO[]> FindActorByPartialNameAsync(string s, int limite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WPF.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WPF.ServiceReference1.IService1>, WPF.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DTO.FilmDTO[] GetListFilmsByIdActor(int id) {
            return base.Channel.GetListFilmsByIdActor(id);
        }
        
        public System.Threading.Tasks.Task<DTO.FilmDTO[]> GetListFilmsByIdActorAsync(int id) {
            return base.Channel.GetListFilmsByIdActorAsync(id);
        }
        
        public DTO.CharacterDTO[] GetListCharacterByIdActorAndIdFilm(int idAct, int idFilm) {
            return base.Channel.GetListCharacterByIdActorAndIdFilm(idAct, idFilm);
        }
        
        public System.Threading.Tasks.Task<DTO.CharacterDTO[]> GetListCharacterByIdActorAndIdFilmAsync(int idAct, int idFilm) {
            return base.Channel.GetListCharacterByIdActorAndIdFilmAsync(idAct, idFilm);
        }
        
        public DTO.FilmDTO[] FindListFilmByPartialActorName(string s) {
            return base.Channel.FindListFilmByPartialActorName(s);
        }
        
        public System.Threading.Tasks.Task<DTO.FilmDTO[]> FindListFilmByPartialActorNameAsync(string s) {
            return base.Channel.FindListFilmByPartialActorNameAsync(s);
        }
        
        public DTO.LightFilmDTO[] GetFavoriteFilms() {
            return base.Channel.GetFavoriteFilms();
        }
        
        public System.Threading.Tasks.Task<DTO.LightFilmDTO[]> GetFavoriteFilmsAsync() {
            return base.Channel.GetFavoriteFilmsAsync();
        }
        
        public DTO.FullActorDTO GetFullActorDetailsByIdActor(int id) {
            return base.Channel.GetFullActorDetailsByIdActor(id);
        }
        
        public System.Threading.Tasks.Task<DTO.FullActorDTO> GetFullActorDetailsByIdActorAsync(int id) {
            return base.Channel.GetFullActorDetailsByIdActorAsync(id);
        }
        
        public bool InsertCommentOnActorId(int id, DTO.CommentDTO commDTO) {
            return base.Channel.InsertCommentOnActorId(id, commDTO);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCommentOnActorIdAsync(int id, DTO.CommentDTO commDTO) {
            return base.Channel.InsertCommentOnActorIdAsync(id, commDTO);
        }
        
        public DTO.FullActorDTO[] GetFullActor(int limite) {
            return base.Channel.GetFullActor(limite);
        }
        
        public System.Threading.Tasks.Task<DTO.FullActorDTO[]> GetFullActorAsync(int limite) {
            return base.Channel.GetFullActorAsync(limite);
        }
        
        public DTO.CommentDTO[] GetComments(int id) {
            return base.Channel.GetComments(id);
        }
        
        public System.Threading.Tasks.Task<DTO.CommentDTO[]> GetCommentsAsync(int id) {
            return base.Channel.GetCommentsAsync(id);
        }
        
        public DTO.FullActorDTO[] FindActorByPartialName(string s, int limite) {
            return base.Channel.FindActorByPartialName(s, limite);
        }
        
        public System.Threading.Tasks.Task<DTO.FullActorDTO[]> FindActorByPartialNameAsync(string s, int limite) {
            return base.Channel.FindActorByPartialNameAsync(s, limite);
        }
    }
}
